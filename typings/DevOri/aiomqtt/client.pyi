"""
This type stub file was generated by pyright.
"""

import asyncio
import dataclasses
import enum
import logging
import ssl
import sys
import paho.mqtt.client as mqtt
from types import TracebackType
from typing import Any, AsyncGenerator, Iterable, Literal, Self, TypeVar
from paho.mqtt.properties import Properties
from paho.mqtt.reasoncodes import ReasonCode
from paho.mqtt.subscribeoptions import SubscribeOptions
from .message import Message
from .types import PayloadType, SocketOption, SubscribeTopic, WebSocketHeaders

if sys.version_info >= (3, 11):
    ...
else:
    ...
MQTT_LOGGER = ...
ClientT = TypeVar("ClientT", bound="Client")
class ProtocolVersion(enum.IntEnum):
    """Map paho-mqtt protocol versions to an Enum for use in type hints."""
    V31 = ...
    V311 = ...
    V5 = ...


@dataclasses.dataclass(frozen=True)
class TLSParameters:
    ca_certs: str | None = ...
    certfile: str | None = ...
    keyfile: str | None = ...
    cert_reqs: ssl.VerifyMode | None = ...
    tls_version: Any | None = ...
    ciphers: str | None = ...
    keyfile_password: str | None = ...


class ProxySettings:
    def __init__(self, *, proxy_type: int, proxy_addr: str, proxy_rdns: bool | None = ..., proxy_username: str | None = ..., proxy_password: str | None = ...) -> None:
        ...
    


@dataclasses.dataclass(frozen=True)
class Will:
    topic: str
    payload: PayloadType | None = ...
    qos: int = ...
    retain: bool = ...
    properties: Properties | None = ...


class Client:
    """The async context manager that manages the connection to the broker.

    Args:
        hostname: The hostname or IP address of the remote broker.
        port: The network port of the remote broker.
        username: The username to authenticate with.
        password: The password to authenticate with.
        logger: Custom logger instance.
        identifier: The client identifier. Generated automatically if ``None``.
        queue_type: The class to use for the queue. The default is
            ``asyncio.Queue``, which stores messages in FIFO order. For LIFO order,
            you can use ``asyncio.LifoQueue``; For priority order you can subclass
            ``asyncio.PriorityQueue``.
        protocol: The version of the MQTT protocol.
        will: The will message to publish if the client disconnects unexpectedly.
        clean_session: If ``True``, the broker will remove all information about this
            client when it disconnects. If ``False``, the client is a persistent client
            and subscription information and queued messages will be retained when the
            client disconnects.
        transport: The transport protocol to use. Either ``"tcp"`` or ``"websockets"``.
        timeout: The default timeout for all communication with the broker in seconds.
        keepalive: The keepalive timeout for the client in seconds.
        bind_address: The IP address of a local network interface to bind this client
            to.
        bind_port: The network port to bind this client to.
        clean_start: (MQTT v5.0 only) Set the clean start flag always, never, or only
            on the first successful connection to the broker.
        max_queued_incoming_messages: Restricts the incoming message queue size. If the
            queue is full, further incoming messages are discarded. ``0`` or less means
            unlimited (the default).
        max_queued_outgoing_messages: Resticts the outgoing message queue size. If the
            queue is full, further outgoing messages are discarded. ``0`` means
            unlimited (the default).
        max_inflight_messages: The maximum number of messages with QoS > ``0`` that can
            be part way through their network flow at once.
        max_concurrent_outgoing_calls: The maximum number of concurrent outgoing calls.
        properties: (MQTT v5.0 only) The properties associated with the client.
        tls_context: The SSL/TLS context.
        tls_params: The SSL/TLS configuration to use.
        tls_insecure: Enable/disable server hostname verification when using SSL/TLS.
        proxy: Configure a proxy for the connection.
        socket_options: Options to pass to the underlying socket.
        websocket_path: The path to use for websockets.
        websocket_headers: The headers to use for websockets.

    Attributes:
        messages (typing.AsyncGenerator[aiomqtt.client.Message, None]):
            Async generator that yields messages from the underlying message queue.
        identifier (str):
            The client identifier.
    """
    def __init__(self, hostname: str, port: int = ..., *, username: str | None = ..., password: str | None = ..., logger: logging.Logger | None = ..., identifier: str | None = ..., queue_type: type[asyncio.Queue[Message]] | None = ..., protocol: ProtocolVersion | None = ..., will: Will | None = ..., clean_session: bool | None = ..., transport: Literal["tcp", "websockets"] = ..., timeout: float | None = ..., keepalive: int = ..., bind_address: str = ..., bind_port: int = ..., clean_start: mqtt.CleanStartOption = ..., max_queued_incoming_messages: int | None = ..., max_queued_outgoing_messages: int | None = ..., max_inflight_messages: int | None = ..., max_concurrent_outgoing_calls: int | None = ..., properties: Properties | None = ..., tls_context: ssl.SSLContext | None = ..., tls_params: TLSParameters | None = ..., tls_insecure: bool | None = ..., proxy: ProxySettings | None = ..., socket_options: Iterable[SocketOption] | None = ..., websocket_path: str | None = ..., websocket_headers: WebSocketHeaders | None = ...) -> None:
        ...
    
    @property
    def messages(self) -> AsyncGenerator[Message, None]:
        ...
    
    @property
    def identifier(self) -> str:
        """Return the client identifier.

        Note that paho-mqtt stores the client ID as `bytes` internally. We assume that
        the client ID is a UTF8-encoded string and decode it first.
        """
        ...
    
    @_outgoing_call
    async def subscribe(self, /, topic: SubscribeTopic, qos: int = ..., options: SubscribeOptions | None = ..., properties: Properties | None = ..., *args: Any, timeout: float | None = ..., **kwargs: Any) -> tuple[int, ...] | list[ReasonCode]:
        """Subscribe to a topic or wildcard.

        Args:
            topic: The topic or wildcard to subscribe to.
            qos: The requested QoS level for the subscription.
            options: (MQTT v5.0 only) Optional paho-mqtt subscription options.
            properties: (MQTT v5.0 only) Optional paho-mqtt properties.
            *args: Additional positional arguments to pass to paho-mqtt's subscribe
                method.
            timeout: The maximum time in seconds to wait for the subscription to
                complete. Use ``math.inf`` to wait indefinitely.
            **kwargs: Additional keyword arguments to pass to paho-mqtt's subscribe
                method.

        """
        ...
    
    @_outgoing_call
    async def unsubscribe(self, /, topic: str | list[str], properties: Properties | None = ..., *args: Any, timeout: float | None = ..., **kwargs: Any) -> None:
        """Unsubscribe from a topic or wildcard.

        Args:
            topic: The topic or wildcard to unsubscribe from.
            properties: (MQTT v5.0 only) Optional paho-mqtt properties.
            *args: Additional positional arguments to pass to paho-mqtt's unsubscribe
                method.
            timeout: The maximum time in seconds to wait for the unsubscription to
                complete. Use ``math.inf`` to wait indefinitely.
            **kwargs: Additional keyword arguments to pass to paho-mqtt's unsubscribe
                method.
        """
        ...
    
    @_outgoing_call
    async def publish(self, /, topic: str, payload: PayloadType = ..., qos: int = ..., retain: bool = ..., properties: Properties | None = ..., *args: Any, timeout: float | None = ..., **kwargs: Any) -> None:
        """Publish a message to the broker.

        Args:
            topic: The topic to publish to.
            payload: The message payload.
            qos: The QoS level to use for publication.
            retain: If set to ``True``, the message will be retained by the broker.
            properties: (MQTT v5.0 only) Optional paho-mqtt properties.
            *args: Additional positional arguments to pass to paho-mqtt's publish
                method.
            timeout: The maximum time in seconds to wait for publication to complete.
                Use ``math.inf`` to wait indefinitely.
            **kwargs: Additional keyword arguments to pass to paho-mqtt's publish
                method.
        """
        ...
    
    async def __aenter__(self) -> Self:
        """Connect to the broker."""
        ...
    
    async def __aexit__(self, exc_type: type[BaseException] | None, exc: BaseException | None, tb: TracebackType | None) -> None:
        """Disconnect from the broker."""
        ...
    


