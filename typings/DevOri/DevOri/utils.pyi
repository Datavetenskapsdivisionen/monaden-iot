"""
This type stub file was generated by pyright.
"""

from typing import Any, AsyncContextManager, Callable, Coroutine, Dict, Generator, Generic, List, Protocol, TypeVar
from dataclasses import dataclass

class Subscriber[sub_T](Protocol):
    async def call_back(self, t: sub_T): # -> None:
        ...
    


class Subscribable[subable_T,sub_args,unsub_args](Protocol):
    def __init__(self) -> None:
        ...
    
    async def subscribe(self, sub: Subscriber[subable_T], args: sub_args) -> None:
        ...
    
    async def unsubscribe(self, sub: Subscriber[subable_T], args: unsub_args) -> None:
        ...
    


class LambdaSubscriber[sub_T](Subscriber[sub_T]):
    def __init__(self, call_back: Callable[[sub_T], Coroutine[None, None, None]]) -> None:
        ...
    
    async def call_back(self, t: sub_T): # -> None:
        ...
    


class QueueSubscriber[sub_T]:
    def __init__(self, max_itmes: int = ...) -> None:
        ...
    
    async def call_back(self, t: sub_T): # -> None:
        ...
    
    async def get_item(self) -> sub_T:
        ...
    
    def get_untill_empty(self) -> Generator[sub_T, None, None]:
        ...
    


def dict2bytes(d: Dict[Any, Any]) -> bytes:
    ...

def bytes2dict(b: bytes) -> Dict[Any, Any]:
    ...

sub_AsyncContextManager = TypeVar("sub_AsyncContextManager", bound=AsyncContextManager[Any])
class MultiACM(AsyncContextManager[Any], Generic[sub_AsyncContextManager]):
    def __init__(self, resources: List[sub_AsyncContextManager]) -> None:
        ...
    
    async def __aenter__(self): # -> Self:
        ...
    
    async def __aexit__(self, *exc_info: Any): # -> None:
        ...
    


@dataclass
class Message[receive_T]:
    topic: str
    payload: receive_T
    ...


