"""
This type stub file was generated by pyright.
"""

from typing import Any, AsyncContextManager, Callable, Dict, LiteralString, Protocol, Type
from utils import LambdaSubscriber, Subscribable
from enum import Enum

class Sender[payload_T](Protocol):
    def __init__(self) -> None:
        ...
    
    async def send(self, topic: str, payload: payload_T): # -> None:
        ...
    


class Reciver[payload_T]:
    def __init__(self, friendly_name: str, sender: Sender[payload_T], prefix: str = ...) -> None:
        ...
    
    async def send_to(self, topic: LiteralString, payload: payload_T): # -> None:
        ...
    


class Publisher[receive_T,valid_topics: LiteralString,e: Enum](AsyncContextManager[Any]):
    def __init__(self, friendly_name: str, informer: Subscribable[receive_T, str, str], category_sorters: Dict[valid_topics, Callable[[receive_T], e]], categories: Type[e], prefix: str = ...) -> None:
        ...
    
    def make_sub(self, topic: valid_topics) -> LambdaSubscriber[receive_T]:
        ...
    
    async def __aenter__(self): # -> Self:
        ...
    
    async def recive_from(self, topic: valid_topics, category: e) -> receive_T:
        ...
    
    async def __aexit__(self, *exc_info: Any): # -> None:
        ...
    


class Communicator[payload_T,receive_T](Sender[payload_T], Subscribable[receive_T, str, str], Protocol):
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        ...
    


class Device[payload_T,receive_T,valid_topics: LiteralString,e: Enum](AsyncContextManager[Any]):
    def __init__(self, friendly_name: str, communicator: Communicator[payload_T, receive_T], category_sorters: Dict[valid_topics, Callable[[receive_T], e]], categories: Type[e], prefix: str = ...) -> None:
        ...
    
    async def send_to(self, topic: LiteralString, payload: payload_T): # -> None:
        ...
    
    async def recive_from(self, topic: valid_topics, category: e) -> receive_T:
        ...
    
    async def __aenter__(self): # -> Self:
        ...
    
    async def __aexit__(self, *exc_info: Any): # -> None:
        ...
    


